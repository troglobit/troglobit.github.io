<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joachim Wiberg</title>
    <link>https://troglobit.com/</link>
    <description>Recent content on Joachim Wiberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>UNIX&amp;trade; 4Life! &amp;#9994;</copyright>
    <lastBuildDate>Sat, 20 Jun 2020 08:57:00 +0100</lastBuildDate>
    
	<atom:link href="https://troglobit.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HowTo: Add Multicast Routing to FreeBSD kernel</title>
      <link>https://troglobit.com/howtos/mrouting-in-freebsd/</link>
      <pubDate>Sun, 01 Aug 2021 08:31:12 +0200</pubDate>
      
      <guid>https://troglobit.com/howtos/mrouting-in-freebsd/</guid>
      <description>This is a very short blog post, mostly intended as a reminder to myself. Basically, there are two methods of adding multicast routing support to the FreeBSD kernel:
 Rebuild the kernel with options MROUTING Load the kernel module: kldload ip_mroute  The kernel rebuild assumes the src.txz set was installed previously.
cd /usr/src cd sys/amd64/conf cat GENERIC | sed &#39;s/GENERIC$/MULTICAST/&#39; &amp;gt; MULTICAST echo &#39;options MROUTING # Multicast routing&#39; &amp;gt;&amp;gt; MULTICAST echo &#39;options PIM # Enable for pimd&#39; &amp;gt;&amp;gt; MULTICAST cd - make kernel KERNCONF=MULTICAST reboot  That&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title>Micro Tetris™</title>
      <link>https://troglobit.com/projects/tetris/</link>
      <pubDate>Wed, 30 Jun 2021 20:37:00 +0200</pubDate>
      
      <guid>https://troglobit.com/projects/tetris/</guid>
      <description>Micro Tetris — one of the smallest Tetris implementations in the world! Utilizing only ANSI escape sequences to draw the board, no external library dependencys other than a standard C-library, like uClibc or musl libc. Hence, it is very suitable for small embedded devices in need of an easter egg ;-)
The game is based on a 1989 International Obfuscated C Code Contest (IOCCC) entry made by John Tromp.</description>
    </item>
    
    <item>
      <title>Fast init for Linux systems</title>
      <link>https://troglobit.com/projects/finit/</link>
      <pubDate>Sun, 06 Jun 2021 19:01:00 +0100</pubDate>
      
      <guid>https://troglobit.com/projects/finit/</guid>
      <description>Finit is an alternative to SysV init and systemd, originally reverse engineered from the EeePC fastinit by Claudio Matsuoka — &amp;ldquo;gaps filled with frog DNA …&amp;rdquo;
Features include:
 Runlevels, defined per service One-shot tasks, services (daemons), or SysV init start/stop scripts Runparts and /etc/rc.local support Process supervision similar to systemd Sourcing environment files Conditions for network/process/custom dependencies Pre/Post script actions Tooling to enable/disable services Built-in getty Built-in watchdog, with support for hand-over to watchdogd Built-in support for Debian/BusyBox /etc/network/interfaces Cgroups v2, both configuration and monitoring in initctl top Plugin support for customization Proper rescue mode with bundled sulogin for protected maintenance shell  Some of these feature are presented below, for more, see the online documentation.</description>
    </item>
    
    <item>
      <title>Emacs: GMail and Lore Mailing Lists</title>
      <link>https://troglobit.com/post/2021-05-11-emacs-gmail-and-lore-mailing-lists/</link>
      <pubDate>Tue, 11 May 2021 19:12:00 +0100</pubDate>
      
      <guid>https://troglobit.com/post/2021-05-11-emacs-gmail-and-lore-mailing-lists/</guid>
      <description>With lots of help from the tireless Tobias Waldekranz, I think I&amp;rsquo;ve finally found the perfect &amp;ldquo;magit like&amp;rdquo; email setup. With Emacs, of course. This is the story of how I did it.
First install notmuch, mbsync (from the isync package), and afew:
sudo apt install notmuch isync afew Do initial setup of notmuch for your user. I&amp;rsquo;ve opted to store my mail in ~/mail, this is used throughout the text below, ymmv.</description>
    </item>
    
    <item>
      <title>Buildroot Development Checklist</title>
      <link>https://troglobit.com/post/2021-05-11-buildroot-development-checklist/</link>
      <pubDate>Tue, 11 May 2021 18:41:00 +0100</pubDate>
      
      <guid>https://troglobit.com/post/2021-05-11-buildroot-development-checklist/</guid>
      <description>Because I always forget, here&amp;rsquo;s a reminder to myself.
  Make your changes on an up-to-date branch from Buildroot master
 git checkout -b package/foobar git fetch --all --tags git rebase origin/master    Use logical commits; upgrade package as one, changing/extending behavior as another, etc.
  Use commit messages to record why changes are made. The first line is usally a (very) brief summary referencing the sub-system:</description>
    </item>
    
    <item>
      <title>System &amp; Process Supervisor for Linux</title>
      <link>https://troglobit.com/projects/watchdogd/</link>
      <pubDate>Fri, 30 Apr 2021 17:02:00 +0100</pubDate>
      
      <guid>https://troglobit.com/projects/watchdogd/</guid>
      <description>watchdogd(8) is an advanced system and process supervisor daemon, primarily intended for embedded Linux and server systems. By default it periodically kicks the system watchdog timer (WDT) to prevent it from resetting the system. In its more advanced guise it monitors critical system resources, supervises the heartbeat of processes, records deadline transgressions, and initiates a controlled reset if needed.
When a system comes back up after a reset, watchdogd determines the reset cause and records it in a file for later analysis by an operator or network management system (NMS).</description>
    </item>
    
    <item>
      <title>It&#39;s Here! ♥</title>
      <link>https://troglobit.com/post/2021-04-27-its-here/</link>
      <pubDate>Tue, 27 Apr 2021 20:18:06 +0100</pubDate>
      
      <guid>https://troglobit.com/post/2021-04-27-its-here/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://troglobit.com/images/finit3.png#floatright&#34; alt=&#34;finit logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finit v4 was finally released the other day! \o/&lt;/p&gt;
&lt;p&gt;It represents the culmination of many years of hard work and careful
thought put in by many people.  There&amp;rsquo;s so much to tell, hardly know
where to begin &amp;hellip; the plan anyway is to use this blog for a series of
posts detailing different aspects and important features.&lt;/p&gt;
&lt;p&gt;The impatient reader can either scroll down to the &lt;strong&gt;video&lt;/strong&gt; below, or
move on to the project home page: &lt;a href=&#34;https://troglobit.com/finit.html&#34;&gt;https://troglobit.com/finit.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alpine Linux with Finit</title>
      <link>https://troglobit.com/post/2021-02-12-alpine-linux-with-finit/</link>
      <pubDate>Fri, 12 Feb 2021 07:24:06 +0100</pubDate>
      
      <guid>https://troglobit.com/post/2021-02-12-alpine-linux-with-finit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; is an amazing little operating
system.  It&amp;rsquo;s small, boots quick, and easy to use.  The size alone makes
it very attractive to container builders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://troglobit.com/images/finit4-screenshot.png#center&#34; alt=&#34;Alpine Linux started with Finit&#34;&gt;&lt;/p&gt;
&lt;p&gt;This blog post details how to set Alpine up with the Finit init system,
replacing the default OpenRC.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backtrace in C</title>
      <link>https://troglobit.com/post/2020-11-15-backtrace-in-c/</link>
      <pubDate>Sun, 15 Nov 2020 17:25:00 +0100</pubDate>
      
      <guid>https://troglobit.com/post/2020-11-15-backtrace-in-c/</guid>
      <description>&lt;p&gt;Reminder to self: remember &lt;code&gt;CFLAGS=-g -Og -rdynamic&lt;/code&gt; to allow
&lt;code&gt;backtrace_symbols()&lt;/code&gt; to actually pretty print function names
in stack traces.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weird Screen Artifacts on X200</title>
      <link>https://troglobit.com/post/2020-08-23-weird-screen-artifacts-on-x200/</link>
      <pubDate>Sun, 23 Aug 2020 14:02:00 +0000</pubDate>
      
      <guid>https://troglobit.com/post/2020-08-23-weird-screen-artifacts-on-x200/</guid>
      <description>I blogged earlier about the awesome little ThinkPad X200 I found and its blinking WiFi LED. Briefly I mentioned an odd issue with X/Wayland on LMDE 4. This turned out to be a HW bug that can only be worked around by disabling hardware acceleration for virtualization:
https://forums.lenovo.com/t5/Windows-8-1-8-7-Vista-and-XP-Discussions/Bizarre-screen-artifacts-on-R400-Integrated-Graphics-running-Win-7-RTM/m-p/153980?page=1#199768
The post says it should be sufficient to &amp;ldquo;Disable Virtualization Technology for Directed-IO (VT-d)&amp;quot;, but that didn&amp;rsquo;t work for me, and I wanted to keep the 8 GiB of RAM I managed to fit into it.</description>
    </item>
    
  </channel>
</rss>