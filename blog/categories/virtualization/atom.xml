<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualization | Troglobit]]></title>
  <link href="http://troglobit.github.io/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://troglobit.github.io/"/>
  <updated>2015-09-20T16:01:16+02:00</updated>
  <id>http://troglobit.github.io/</id>
  <author>
    <name><![CDATA[Joachim Nilsson]]></name>
    <email><![CDATA[troglobit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finally, NetBSD Boots in KVM!]]></title>
    <link href="http://troglobit.github.io/blog/2010/08/29/finally/"/>
    <updated>2010-08-29T20:44:34+02:00</updated>
    <id>http://troglobit.github.io/blog/2010/08/29/finally</id>
    <content type="html"><![CDATA[<p>Compared to OpenBSD and FreeBSD the NetBSD install was hard, really
hard.  It wasn&rsquo;t until I stumbled across <a href="https://ezunix.org/index.php?title=NetBSD_5_on_KVM">this</a> that I managed to
convince myself to try it again.</p>

<p>The trick seems to be to ignore as much as you can from other Internet
tips.  NetBSD runs fine in KVM, so if someone says you need to run it in
Qemu mode &mdash; don&rsquo;t believe the hype.  OK, in <code>virt-manager</code> there
is no preset defaults for NetBSD, so I went with a generic OS and tried
starting the install from there.  The kernel hangs before it probes USB,
or it segfaults.</p>

<p>What I did was to stop the guest, and in the details view I disabled
ACPI and selected the pcnet NIC instead of the default <code>ne2k-pci</code>.
Running the default options in the NetBSD 5.0.2 installer, and the
bootloader after install, works fine.</p>

<p>If you still don&rsquo;t manage to get it running check the KVM home page for
<a href="http://www.linux-kvm.org/page/Bugs">known bugs</a> and workarounds.  Sometimes it helps adding
<code>-no-kvm-irqchip</code> or <code>-no-kvm-pit</code>. However, <code>virt-manager</code> does not
seem to support these options yet, so you must run from the command
line.</p>

<p>Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto Setup and Run Xen]]></title>
    <link href="http://troglobit.github.io/blog/2009/06/08/howto-setup-and-run-xen/"/>
    <updated>2009-06-08T23:05:42+02:00</updated>
    <id>http://troglobit.github.io/blog/2009/06/08/howto-setup-and-run-xen</id>
    <content type="html"><![CDATA[<p>This is an extremly brief and quick <a href="http://www.xenproject.org/">Xen</a> tutorial. There are lots of
them already, see your GNU/Linux distribution&rsquo;s wiki, HowtoForge or
other places for a starter guide. This particular HowTo deals with
setting up Xen as easy as possible using Ubuntu 8.04 LTS as host
operating system (dom0 in Xen terms) and Ubuntu 9.04 as guest operating
systems (domU in Xen lingo).</p>

<p>Ubuntu 8.04 LTS comes with a Xen kernel that can run as dom0. This is
quite important, so pay attention to setting that up correctly. For this
I recommend the <a href="http://howtoforge.org/high-performance-xen-on-ubuntu-8.04-amd64">HowtoForge Tutorial</a>.</p>

<p><strong>Note:</strong> you will need to upgrade the default Xen 3.2 to 3.3 to be able
to run the latest distributions as guest OS.  See this
<a href="https://answers.launchpad.net/ubuntu/+question/50326">Ubuntu question</a> for more insight.  To get Xen 3.3, simply activate
the Hardy backports repository in your <code>/etc/apt/sources.list</code> and, as
usual, pay attention to your <code>/boot/grub/menu.lst</code> so that it points out
the Xen 3.3 image in the <code>defaults=</code> option.</p>

<p>When done with the basic setup you should install pygrub on your host,
this is a truly magic piece of software that makes it possible to boot
all guests using their own kernel and modules.  See the <a href="http://wiki.debian.org/PyGrub">Debian wiki</a>
for some details on install and setup.  Then ignore what you read and do
like this:</p>

<pre><code># /var/lib/xend/domains/example/config.sxp - Xen domU example.
# Note the order of partitions in disk=[], the first listed partition
# is the partition where your /boot (grub) resides. 
bootloader  = '/usr/bin/pygrub'

builder     = 'linux'
memory      = '2048'
root        = '/dev/xvda1 ro'

disk        = [
  'phy:/dev/disk/by-uuid/df3418f5-2fc3-443c-8e64-4395828dc678,xvda1,w',
  'phy:/dev/disk/by-uuid/acecf01e-c4d9-4a7b-b18a-681c69f71173,xvda2,w',
]

name        = 'example'

vif         = [ 'bridge=eth1' ]
dhcp        = "off"
ip          = "12.34.56.78"
netmask     = "255.255.255.252"
gateway     = "12.34.56.77"
hostname    = "example"

on_poweroff = 'destroy'
on_reboot   = 'restart'
on_crash    = 'restart'
vcpus       = 1
extra       = 'xencons=tty1'
</code></pre>

<p>When installing grub on your guest, don&rsquo;t pay any attention to Grub
complaining about not being able to map <code>/dev/xvda1</code> to a BIOS disk.
pyGrub doesn&rsquo;t care about such wordly things as physical disks.  Just
make sure the <code>/boot</code> directory&rsquo;s partition (often <code>/</code>) is the first
listed in the <code>disk=[]</code> array above.</p>

<p>You may need to edit the <code>update-grub</code> script before you install grub,
it is located at <code>/usr/sbin/update-grub</code>.  Search for <code>in_xen</code>, a fairly
long way down.  Make sure it&rsquo;s set to <code>in_xen=1</code> before the big
<code>if[]</code>-clause that depends on it.  Without this fix the Xen able kernels
in Ubuntu 9.04, and later, are not detected.</p>

<p>Now run <code>update-grub</code> and answer yes to the questions. Take good care to
verify that the script actually finds one active (server) kernel and
adds it properly to your <code>/boot/grub/menu.lst</code> file.</p>

<p>Another common problem is the lack of a console login.  Usually you
don&rsquo;t need one, but if you&rsquo;d like to check your domU from within your
dom0 you need to add the file &ldquo;console&rdquo; to <code>/etc/event.d</code></p>

<pre><code># console - getty
#
# This service maintains a getty on the Xen serial console
# from the point the system is started until it is shut
# down again.

start on stopped rc2
start on stopped rc3
start on stopped rc4
start on stopped rc5

stop on runlevel 0
stop on runlevel 1
stop on runlevel 6

respawn
exec /sbin/getty 38400 console
</code></pre>

<p>That should do the trick!  If it doesn&rsquo;t, then there&rsquo;s plenty of help to
find in the Debian and Ubuntu wikis, see links above. Good luck!</p>
]]></content>
  </entry>
  
</feed>
