<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Troglobit]]></title>
  <link href="http://troglobit.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://troglobit.github.io/"/>
  <updated>2016-03-25T00:14:54+01:00</updated>
  <id>http://troglobit.github.io/</id>
  <author>
    <name><![CDATA[Joachim Nilsson]]></name>
    <email><![CDATA[troglobit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rant: All the C Compiler Warnings ...]]></title>
    <link href="http://troglobit.github.io/blog/2015/01/12/rant-all-the-c-compiler-warnings-dot-dot-dot/"/>
    <updated>2015-01-12T01:57:40+01:00</updated>
    <id>http://troglobit.github.io/blog/2015/01/12/rant-all-the-c-compiler-warnings-dot-dot-dot</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;Enable <em>all</em> the warnings!&rdquo;</p></blockquote>

<p>This is one of the truths you learn when you start working with C.  Most
of the time adding <code>CPPFLAGS="-W -Wall -Werror"</code> is all you need to find
all the nasty bugs.  And if that&rsquo;s not enough, there are tons of tools
for static code analysis, like <code>scan-build</code> in
<a href="http://clang-analyzer.llvm.org/scan-build.html">Clang</a>, and
<a href="https://scan.coverity.com/">Coverity Scan</a>, to help you <em>find all the
bugs</em>!</p>

<p>However, these pesky warnings (some of which cannot even be disabled!)
are sometimes more of a nuisance than help.  Sometimes you <em>know</em> that
some parameters to a function will remain unused &ndash; it&rsquo;s a callback, and
you don&rsquo;t need all the data given to you.  So you start adding all kinds
of voodoo, like <code>__attribute__ ((unused))</code> &hellip; seriously?</p>

<!-- more -->


<p>Imagine this now sprinkled all over the code base.</p>

<pre><code class="C">    static void callback(uev_ctx_t *ctx __attribute__((unused)),
                         uev_t *w __attribute__((unused)),
                         void *arg __attribute__((unused)),
                         int events __attribute__((unused)))
    {
            ...
    }
</code></pre>

<p>So you make small macros to help out:</p>

<pre><code class="C">    #define UNUSED(arg) arg __attribute__ ((unused))
</code></pre>

<p>We now have this instead:</p>

<pre><code class="C">    static void callback(uev_ctx_t *UNUSED(ctx), uev_t *UNUSED(w),
                         void *UNUSED(arg), int UNUSED(events))
    {
            ...
    }
</code></pre>

<p>Admittedly, using the macro is much cleaner, but still.  Why not just
allow this <em>much more readable</em> version?</p>

<pre><code class="C">    static void callback(uev_ctx_t *ctx, uev_t *w, void *arg, int events)
    {
            ...
    }
</code></pre>

<p>The human eye is marvellous at finding little things that stick out,
but when there&rsquo;s nothing but annoying things on the screen we can no
longer see the most obvious pointer casting bugs, and we get sloppy.</p>

<p>I&rsquo;m seriously considering adding some kind of <code>--developer-mode</code> to my
own projects which will warn like crazy, as usual, and as soon as I turn
it off (default) complete silence will arrive.  That&rsquo;s how sick and
tired I am of <em>all the warnings</em> and the resulting almost completely
unreadable code.</p>

<p><a href="http://blog.codinghorror.com/when-understanding-means-rewriting/">We spend a lot of time reading code</a>,
so it should be enjoyable and easy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming as an Artform]]></title>
    <link href="http://troglobit.github.io/blog/2013/06/22/programming-as-an-artform/"/>
    <updated>2013-06-22T18:25:00+02:00</updated>
    <id>http://troglobit.github.io/blog/2013/06/22/programming-as-an-artform</id>
    <content type="html"><![CDATA[<p>This is a response to the excellent post by Jani Gor≈°e, titled
<a href="https://blooki.st/BlookElement/ShowTextPhoto?blookElementId=1962">Why is Programming an Art?</a></p>

<p>Ever since I began studying Computer Engineering at
<a href="http://www.mdh.se">university</a> back in 1995 I have struggled to find
the &ldquo;proper&rdquo; ways to format my code, name functions and variables
appropriately, structure functions into files and files into
directories with Makefiles and Makefile snippets, using both recursive
and non-recursive make.  Formatting of code, for instance, was for a
while a bit of an obsession of mine, and it sort of is still.  But
today I am more concerned with the overall structure and how
components interact.  Even though I can still get very annoyed at
people naming their local variables obtrusively.</p>

<!-- more -->


<p><a href="http://www.amazon.com/Practice-Programming-Addison-Wesley-Professional-Computing/dp/020161586X"><img class="right" src="/images/Practice_of_Programming.jpeg" width="222" height="155"></a></p>

<p>I still do most of my work, professional and hobby, using plain old C.
I&rsquo;ve read many books and style guides on the subject and the one that
really stood out as being extremely helpful, apart from reading a LOT
of code, is
<a href="http://www.amazon.com/Practice-Programming-Addison-Wesley-Professional-Computing/dp/020161586X">The Practice of Programming</a>
by Kernighan and Pike!  The book is crammed full with tons of neat
advice and best practises that simly just make sense.  Stuff like
&ldquo;name your local variables i, j, k for counters and loop variables&rdquo;,
which is basically what most of us do already.  Just read it and
you&rsquo;ll see what I mean &ndash; spot on!</p>

<p>Spot on? I hear you say, why should you read something that seemingly
doesn&rsquo;t tell you anything you already know?  Well, even the most
evident practises often come under scrutiny when programmers from the
most different schools meet.  At my job we have Microsoft, Bombardier,
and ABB programmers which have little to no experience with UNIX,
Linux or any Free/Open Source software development.  They are used to
more cumbersome practises, &ldquo;Hungarian Style Notation&rdquo;, inflexible
corporate styles which nobody can explain anymore, and so on.</p>

<p>It is difficult to explain the way of Free/Open Source software, but I
think the most important message is: keep it simple, maintain the same
style as used in the rest of the project, and if you comment then
write what you mean with a piece of code, not what it does.  And, in
the true style of UNIX, write one program that does its job well.</p>

<p>The beuty in software comes from the structure, the flow, the
similarities and how the modules fit together.  The absence of
duplication, and the readability.</p>

<p>Visit the
<a href="http://www.informit.com/store/practice-of-programming-9780201615869">homepage for the book</a>
and download the source code to have a look for yourself.  Enjoy!</p>
]]></content>
  </entry>
  
</feed>
