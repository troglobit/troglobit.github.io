<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Inetd | Troglobit]]></title>
  <link href="http://troglobit.github.io/blog/categories/inetd/atom.xml" rel="self"/>
  <link href="http://troglobit.github.io/"/>
  <updated>2015-03-07T08:59:02+01:00</updated>
  <id>http://troglobit.github.io/</id>
  <author>
    <name><![CDATA[Joachim Nilsson]]></name>
    <email><![CDATA[troglobit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inetd Support in Finit v1.12]]></title>
    <link href="http://troglobit.github.io/blog/2015/03/06/inetd-support-in-finit-v1-dot-12/"/>
    <updated>2015-03-06T22:34:45+01:00</updated>
    <id>http://troglobit.github.io/blog/2015/03/06/inetd-support-in-finit-v1-dot-12</id>
    <content type="html"><![CDATA[<p>A steady flow of features, and releases, is key to keeping any project
alive.  Recently I ticked off another item in the <a href="/finit.html">Finit</a>
TODO list.</p>

<p>Finit v1.12 now comes with a built-in inetd!.  You no longer need an
external inetd daemon to launch services on demand.</p>

<p>The good news doesn&rsquo;t stop there, this little inetd actually supports a
poor man&rsquo;s tcpwrappers!</p>

<pre><code>inetd ssh/tcp          nowait [2345] /sbin/dropbear -i -R -F
inetd ssh@eth0:222/tcp nowait [2345] /sbin/dropbear -i -R -F
</code></pre>

<p>With these two lines in your <code>/etc/finit.conf</code> you tell finit to launch
the <a href="https://matt.ucc.asn.au/dropbear/dropbear.html">Dropbear SSH</a>
server on demand on port 22 (default ssh/tcp port in <code>/etc/services</code>) on
<em>all</em> interfaces except on <code>eth0</code>, which in your case is the Internet
(WAN) interface, here you want SSH to run on port 222.  Actually, you
don&rsquo;t want port 22 open at all on <code>eth0</code> &hellip; so finit takes care of this
for you!  Seriously, it just works!  No need for messing about with that
nasty old <code>iptables</code> &hellip;</p>

<p>The original UNIX inetd super server supported many protocols
internally, some of which may seem a bit odd today, and some have been
superseded by more modern protocols.</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Echo_Protocol">echo</a></li>
<li><a href="http://en.wikipedia.org/wiki/Character_Generator_Protocol">chargen</a></li>
<li><a href="http://en.wikipedia.org/wiki/Time_Protocol">time</a></li>
<li><a href="http://en.wikipedia.org/wiki/Daytime_Protocol">daytime</a></li>
<li><a href="http://en.wikipedia.org/wiki/Discard_Protocol">discard</a></li>
</ul>


<p>Finit currently only supports one, <code>time</code>.  It is built as a plugin in
Finit to serve as an example of how you can extend it yourself.  The
time service can be called either as UDP or TCP.  To prevent security
issues, the <code>time</code> protocol is disabled by default.  To enable it you
need two things:</p>

<ol>
<li>The <code>time.so</code> plugin (built by default)</li>
<li>An <code>inetd time ...</code> line in <code>/etc/finit.conf</code></li>
</ol>


<p>Assuming you&rsquo;ve installed the default set of plugins, the following two
lines can be added:</p>

<pre><code>inetd time/udp   wait [2345] internal
inetd time/tcp nowait [2345] internal
</code></pre>

<p>This can be very useful for testing the inetd capabilities, your network
connection, or simply to get the time to a client where NTP for some
reason does not work, or is blocked.  For instance, you could have a GPS
setup on your server and distribute time to clients with the <code>time</code>
protocol.</p>

<p>To use it you need an <a href="http://www.aelius.com/njh/rdate/"><code>rdate</code></a>
client.  Users of <code>rdate</code> in BusyBox may need to be reminded that it
only supports TCP.</p>

<pre><code>$ rdate -pu 198.51.100.42
Sat Mar  7 08:48:58 CET 2015
</code></pre>

<p>For more info on Finit and its features, see the <a href="https://github.com/troglobit/finit/blob/master/README.md">README</a>.</p>

<p>Enjoy! ãƒ„</p>

<!-- more -->


<h3>Changes</h3>

<ul>
<li>Add support for built-in inetd super server &ndash; launch services on
demand.  Supports filtering per interface and custom Inet ports.</li>
<li>Upgrade to <a href="https://github.com/troglobit/libuev">libuEv</a> v1.1.0 to better handle error conditions.</li>
<li>Allow mixed case config directives in <code>finit.conf</code></li>
<li>Add support for RFC 868 (rdate) time plugin, start as inetd service.</li>
<li>Load plugins before parsing <code>finit.conf</code>, this makes it possible to
extend finit even with configuration commands.  E.g., the <code>time.so</code>
plugin must be loaded for the <code>inetd time/tcp internal</code> service to be
accepted when parsing <code>finit.conf</code>.</li>
<li>Slight change in TTY fallback behavior, if no TTY is listed in the
system <code>finit.conf</code> first inspect the <code>console</code> setting and only if
that too is unset fall back to <code>/bin/sh</code></li>
<li>When falling back to the <code>console</code> TTY or <code>/bin/sh</code>, finit now marks
this fallback as console.  Should improve usability in some use cases.</li>
</ul>


<h3>Fixes</h3>

<ul>
<li>Revert &ldquo;Use vfork() instead of fork() before exec()&rdquo; from v1.11.  It
turned out to not work so well after all.  For instance, launching
TTYs in a background process completely blocked inetd services from
even starting up listening sockets &hellip; proper fork seems to work fine
though.  This is the casue for <em>yanking</em> the <a href="https://github.com/troglobit/finit/compare/1.10...1.11">1.11</a> release, below.</li>
<li>Trap segfaults caused by external plugins/callbacks in a sub-process.
This prevents a single programming mistake in by a 3rd party developer
from taking down the entire system.</li>
<li>Fix Coverity CID 56281: dlopen() resource leak by storing the pointer.
For the time being we do not support unloading plugins.</li>
<li>Set hostname early, so bootstrap processes like syslog can use it.</li>
<li>Only restart <em>lost daemons</em> when recovering from a SIGSTOP/norespawn.</li>
</ul>

]]></content>
  </entry>
  
</feed>
