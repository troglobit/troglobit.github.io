<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Opensource | Troglobit]]></title>
  <link href="http://troglobit.github.io/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://troglobit.github.io/"/>
  <updated>2016-03-07T01:14:46+01:00</updated>
  <id>http://troglobit.github.io/</id>
  <author>
    <name><![CDATA[Joachim Nilsson]]></name>
    <email><![CDATA[troglobit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HowTo: Using -lite With a GIT-based Application]]></title>
    <link href="http://troglobit.github.io/blog/2015/07/02/howto-using-lite-with-a-git-based-application/"/>
    <updated>2015-07-02T17:11:55+02:00</updated>
    <id>http://troglobit.github.io/blog/2015/07/02/howto-using-lite-with-a-git-based-application</id>
    <content type="html"><![CDATA[<p>Years ago while looking for a fast <a href="https://en.wikipedia.org/wiki/Init">init</a> replacement for <a href="http://westermo.com/">work</a>,
I found <a href="http://helllabs.org/finit/">Finit</a>.  Originally written by <a href="https://github.com/cmatsuoka">Claudio Matsuoka</a> to act
as a drop-in replacement for the <a href="https://en.wikipedia.org/wiki/Asus_Eee_PC">Asus EeePC</a> <a href="http://wiki.eeeuser.com/boot_process:the_boot_process">fastinit</a>, <em>&#8220;gaps
filled with frog DNA &hellip;&#8221;</em></p>

<p>Until I found Finit I had always been in awe of those venturing into the
realm of <a href="http://0pointer.net/blog/">PID 1</a>.  However, learning from the simplicity of Claudio&#8217;s
code I realized that although PID 1 at times is indistinguishable from
magic, it is really not that hard to master.  <a href="https://github.com/troglobit/finit">My version of Finit</a>
is available on GitHub.</p>

<p>The code is open sourced under the very liberal <a href="http://opensource.org/licenses/MIT">MIT/X11 license</a>,
and much of its frog DNA has proven very useful to me over the years.
This blog post is about how that frog DNA can help you fill gaps in your
projects &hellip;</p>

<!-- more -->


<p>Recently I broke out the most generic pieces from Finit into a separate
library, which I call <a href="https://github.com/troglobit/libite">libite</a> (because it looks awesome linking to
it: <code>-lite</code> :) I complemented it with a few pieces of my own and some
from the <a href="http://www.openbsd.org/">OpenBSD</a> project, most notably their famous string API:
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strlcpy">strlcpy(3)</a> and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strlcpy">strlcat(3)</a>.  Also included is the very useful
*BSD linked list API <a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/LIST_EMPTY.3">sys/queue.h</a>, which is a much more up to date
version than GLIBC carries.  For example, the new <code>_SAFE</code> macros are
missing, which you want to use while traversing lists to delete/free
nodes.</p>

<p>To make use of <code>-lite</code> and its APIs you can either build it as a
separate library and install <code>lite.h</code> and <code>libite.so.1</code> to your system,
or add <code>libite</code> as a GIT submodule to your project and use only the
parts you need from the archive:</p>

<pre><code>git submodule add https://github.com/troglobit/libite.git
</code></pre>

<p>You then need to add <code>#include "libite/lite.h"</code> to the source and adapt
your Makefile slightly to call the <code>libite/Makefile</code> before linking your
application to the <code>libite.a</code> archive:</p>

<pre><code>all: $(EXEC) libite/libite.a

libite/libite.a: Makefile
        @$(MAKE) -C libite

$(EXEC): $(OBJS) libite/libite.a
        @gcc -o $@ $^
</code></pre>

<p>For an example of how this can look, see the <a href="https://github.com/troglobit/uftpd">uftpd</a> project, which
uses both <code>-lite</code> and <code>-luev</code>.  The latter is my small event library,
<a href="https://github.com/troglobit/libuev">libuEv</a>.  For help using <code>-lite</code> with the GNU configure and build
system, see <a href="https://github.com/troglobit/inadyn">inadyn</a>.</p>

<p>Libite builds in &#8220;silent mode&#8221; by default, use <code>make V=1</code> (like the
kernel) to get a more verbose output, usable for autobuilders etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inetd Support in Finit v1.12]]></title>
    <link href="http://troglobit.github.io/blog/2015/03/06/inetd-support-in-finit-v1-dot-12/"/>
    <updated>2015-03-06T22:34:45+01:00</updated>
    <id>http://troglobit.github.io/blog/2015/03/06/inetd-support-in-finit-v1-dot-12</id>
    <content type="html"><![CDATA[<p>A steady flow of features, and releases, is key to keeping any project
alive.  Recently I ticked off another item in the <a href="/finit.html">Finit</a>
TODO list &#8230;</p>

<p>Finit v1.12 now comes with a built-in inetd!  You no longer need an
external inetd daemon to launch services on demand.</p>

<p>The good news doesn&#8217;t stop there, this little inetd actually supports a
poor man&#8217;s tcpwrappers!</p>

<pre><code>inetd ssh/tcp          nowait [2345] /sbin/dropbear -i -R -F
inetd ssh@eth0:222/tcp nowait [2345] /sbin/dropbear -i -R -F
</code></pre>

<p>With these two lines in your <code>/etc/finit.conf</code> you tell finit to launch
the <a href="https://matt.ucc.asn.au/dropbear/dropbear.html">Dropbear SSH</a>
server on demand on port 22 (default ssh/tcp port in <code>/etc/services</code>) on
<em>all</em> interfaces except on <code>eth0</code>, which in your case is the Internet
(WAN) interface, here you want SSH to run on port 222.  Actually, you
don&#8217;t want port 22 open at all on <code>eth0</code> &#8230; so finit takes care of this
for you!  Seriously, it just works, no need for messing about with that
nasty old <code>iptables</code> anymore!</p>

<p>The original UNIX inetd super server supported many protocols
internally, some of which may seem a bit odd today, and some have been
superseded by more modern protocols.</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Echo_Protocol">echo</a></li>
<li><a href="http://en.wikipedia.org/wiki/Character_Generator_Protocol">chargen</a></li>
<li><a href="http://en.wikipedia.org/wiki/Time_Protocol">time</a></li>
<li><a href="http://en.wikipedia.org/wiki/Daytime_Protocol">daytime</a></li>
<li><a href="http://en.wikipedia.org/wiki/Discard_Protocol">discard</a></li>
</ul>


<p>Finit currently only supports one internal/built-in standard service,
<code>time</code>.  It is built as a plugin to serve as an example of how you can
extend Finit yourself.  The time service can be called either as UDP or
TCP.  To prevent security issues, the <code>time</code> protocol is disabled by
default.  To enable it you need two things:</p>

<ol>
<li>The <code>time.so</code> plugin (built by default)</li>
<li>An <code>inetd time ...</code> line in <code>/etc/finit.conf</code></li>
</ol>


<p>Assuming you&#8217;ve installed the default set of plugins, the following two
lines can be added:</p>

<pre><code>inetd time/udp   wait [2345] internal
inetd time/tcp nowait [2345] internal
</code></pre>

<p>This can be very useful for testing the inetd capabilities, your network
connection, or simply to get the time to a client where NTP for some
reason does not work, or is blocked.  For instance, you could have a GPS
setup on your server and distribute time to clients with the <code>time</code>
protocol.</p>

<p>To use it you need an <a href="http://www.aelius.com/njh/rdate/"><code>rdate</code></a>
client.  Users of <code>rdate</code> in BusyBox may need to be reminded that it
only supports TCP.</p>

<pre><code>$ rdate -pu 198.51.100.42
Sat Mar  7 08:48:58 CET 2015
</code></pre>

<p>For more info on Finit and its features, see the <a href="https://github.com/troglobit/finit/blob/master/README.md">README</a>.</p>

<p>Enjoy! ãƒ„</p>

<!-- more -->


<h3>Changes</h3>

<ul>
<li>Add support for built-in inetd super server &#8211; launch services on
demand.  Supports filtering per interface and custom Inet ports.</li>
<li>Upgrade to <a href="https://github.com/troglobit/libuev">libuEv</a> v1.1.0 to better handle error conditions.</li>
<li>Allow mixed case config directives in <code>finit.conf</code></li>
<li>Add support for RFC 868 (rdate) time plugin, start as inetd service.</li>
<li>Load plugins before parsing <code>finit.conf</code>, this makes it possible to
extend finit even with configuration commands.  E.g., the <code>time.so</code>
plugin must be loaded for the <code>inetd time/tcp internal</code> service to be
accepted when parsing <code>finit.conf</code>.</li>
<li>Slight change in TTY fallback behavior, if no TTY is listed in the
system <code>finit.conf</code> first inspect the <code>console</code> setting and only if
that too is unset fall back to <code>/bin/sh</code></li>
<li>When falling back to the <code>console</code> TTY or <code>/bin/sh</code>, finit now marks
this fallback as console.  Should improve usability in some use cases.</li>
</ul>


<h3>Fixes</h3>

<ul>
<li>Revert &#8220;Use vfork() instead of fork() before exec()&#8221; from v1.11.  It
turned out to not work so well after all.  For instance, launching
TTYs in a background process completely blocked inetd services from
even starting up listening sockets &#8230; proper fork seems to work fine
though.  This is the casue for <em>yanking</em> the <a href="https://github.com/troglobit/finit/compare/1.10...1.11">1.11</a> release.</li>
<li>Trap segfaults caused by external plugins/callbacks in a sub-process.
This prevents a single programming mistake in by a 3rd party developer
from taking down the entire system.</li>
<li>Fix Coverity CID 56281: <code>dlopen()</code> resource leak by storing the
pointer.  For the time being we do not support unloading plugins.</li>
<li>Set hostname early, so bootstrap processes like syslog can use it.</li>
<li>Only restart <em>lost daemons</em> when recovering from a <code>SIGSTOP</code>/norespawn.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finit v1.11 Released!]]></title>
    <link href="http://troglobit.github.io/blog/2015/01/24/finit-v1-dot-11-released/"/>
    <updated>2015-01-24T16:54:23+01:00</updated>
    <id>http://troglobit.github.io/blog/2015/01/24/finit-v1-dot-11-released</id>
    <content type="html"><![CDATA[<p><strong>Update 2015-03-09</strong>: This release has unfortunately been <em>yanked</em> due
to serious regressions in launching background processes.  It has been
replaced by <a href="/blog/2015/03/06/inetd-support-in-finit-v1-dot-12/">v1.12</a></p>

<!-- more -->


<p>I&#8217;m very pleased to announce <a href="/finit.html">Finit v1.11</a> â€” this is the
episode where two of my projects finally get married! ãƒ„</p>

<h3>Changes</h3>

<ul>
<li>Now using the asynchronous <a href="https://github.com/troglobit/libuev">libuEv</a> library for handling all events:
signals, timers and listening to sockets or file descriptors.</li>
<li>Rename NEWS.md &#8211;> CHANGELOG.md, with symlinks for <code>make install</code></li>
<li>Attempt to align with http://keepachangelog.com for the ChangeLog</li>
<li><a href="https://travis-ci.org/troglobit/finit">Travis CI</a> now only invokes <a href="https://scan.coverity.com/projects/3545">Coverity Scan</a> from the &#8216;dev&#8217; branch.  This
means that all development, except documentation updates, must go into
that branch.</li>
</ul>


<h3>Fixes</h3>

<ul>
<li>Fix bug with finit dying when no <code>tty</code> is defined in <code>finit.conf</code>, now
even the fallback shell has control over its TTY, see fix in GIT
commit <a href="https://github.com/troglobit/finit/commit/dea3ae8">dea3ae8</a> for this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent Open Source Work]]></title>
    <link href="http://troglobit.github.io/blog/2015/01/08/recent-open-source-work/"/>
    <updated>2015-01-08T01:57:14+01:00</updated>
    <id>http://troglobit.github.io/blog/2015/01/08/recent-open-source-work</id>
    <content type="html"><![CDATA[<p>I&#8217;m a coder, not a writer.  Here&#8217;s what I&#8217;ve been working on during the
winter holidays:</p>

<ul>
<li>A new feature release of <a href="/finit.html">Finit</a> is coming shortly, which
will use <a href="https://github.com/troglobit/libuev">libuEv</a> and feature
inetd support built-in!</li>
<li>Another minor release of my own take on event loops,
<a href="https://github.com/troglobit/libuev">libuEv</a>
<a href="https://github.com/troglobit/libuev/releases/tag/v1.0.3">v1.0.3</a>.
This time with a heavy focus on documentation and Q&amp;A, extensive
validation testing have been done on this release.</li>
<li>Released another minor release of <a href="/mrouted.html">mrouted</a>,
<a href="https://github.com/troglobit/mrouted/releases/tag/3.9.7">v3.9.7</a>,
which despite its age, and all other obvious limitations of
<a href="http://en.wikipedia.org/wiki/Distance_Vector_Multicast_Routing_Protocol">DVMRP</a>,
is still one of the best options for <em>dynamic</em> multicast routing
available today.</li>
<li><p>Major new release of <a href="/pimd.html">pimd</a>,
<a href="https://github.com/troglobit/pimd/releases/tag/2.2.0">v2.2.0</a>, which
is likely the last release ever of the old pimd, unless someone starts
paying me to work on it.</p>

<p>&#8230; or more people step up to help.  Both the Xorp PIM-SM and the
upcoming Quagga PIM-SSM implementations are in better shape.  The only
thing old pimd has got going for it is the license.  It&#8217;s 3-clause
BSD, so very liberal.</p></li>
</ul>


<p>If you&#8217;re interested in pitching in, on any of my projects, just send me
an email or connect with me on GitHub!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mrouted v3.9.7]]></title>
    <link href="http://troglobit.github.io/blog/2014/12/28/mrouted-v3-dot-9-7/"/>
    <updated>2014-12-28T19:38:06+01:00</updated>
    <id>http://troglobit.github.io/blog/2014/12/28/mrouted-v3-dot-9-7</id>
    <content type="html"><![CDATA[<p>Another release today is the venerable <a href="/mrouted.html">mrouted</a>, now
available as
<a href="https://github.com/troglobit/mrouted/releases/tag/3.9.7">v3.9.7 on GitHub</a>.</p>

<!-- more -->


<h2>Changes &amp; New Features</h2>

<ul>
<li>SNMP Support removed.  It never compiled and would have likely
needed a complete refactor to support modern AgentX.</li>
<li>Replaced static <code>config.mk</code> with configure script from pimd</li>
<li>RSRR Support now disabled by default, use <code>--enable-rsrr</code> to configure
script to re-enable</li>
<li>Possible to start with <code>mrouted</code> disabled on all interfaces by
default.  Use <code>enable</code> to .conf <code>phyint</code> directive and <code>-M/-N</code> command
line options to control behavior, default is same as before.  Thanks
to Joseph Gooch (<a href="https://github.com/goochjj">@goochjj</a>) for this feature!</li>
<li>Add David Waitzman and Craig Partridge to list of original authors
of <code>mrouted</code>, after being by Mr Waitzman :)</li>
<li>Change to use <code>stdint.h</code> types instead of unsafe homegrown types</li>
</ul>


<h2>Bug Fixes</h2>

<ul>
<li>Fix issue with older BSD kernels, mainly for current FreeBSD 10 and
older, that don&#8217;t really give RAW sockets but byte swap <code>ip_len</code>
field, Olivier Cochard-LabbÃ© (<a href="https://github.com/ocochard">@ocochard</a>)</li>
<li>Build fixes for FreeBSD, should make maintaining ports easier :)</li>
<li>Change from <code>select()</code> to <code>poll()</code> due to descriptor limits, e.g.,
on BSD.</li>
<li>UNIX 2038 first audit, inspired by OpenBSD.  Cleanup type confusion
<code>int/u_long</code> where it should be <code>time_t</code>.  Also, clarify that <code>genid</code>
is OK, since it&#8217;s used and stored as unsigned 32-bit integer.</li>
<li>Lots of minor fixes detected by Coverity Scan and Clang scan-build
https://scan.coverity.com/projects/3320</li>
</ul>

]]></content>
  </entry>
  
</feed>
