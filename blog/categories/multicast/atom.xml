<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Multicast | Troglobit]]></title>
  <link href="http://troglobit.github.io/blog/categories/multicast/atom.xml" rel="self"/>
  <link href="http://troglobit.github.io/"/>
  <updated>2016-03-25T00:17:59+01:00</updated>
  <id>http://troglobit.github.io/</id>
  <author>
    <name><![CDATA[Joachim Nilsson]]></name>
    <email><![CDATA[troglobit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Multicast With Docker]]></title>
    <link href="http://troglobit.github.io/blog/2016/03/07/testing-multicast-with-docker/"/>
    <updated>2016-03-07T01:37:04+01:00</updated>
    <id>http://troglobit.github.io/blog/2016/03/07/testing-multicast-with-docker</id>
    <content type="html"><![CDATA[<p>Recently <a href="https://github.com/troglobit/pimd/issues/70">issue #70</a> was
reported to <a href="https://github.com/troglobit/pimd/">pimd</a>.  That number of
issues reported is cool in itself, but this was a question about
<a href="https://www.docker.com">Docker</a> and <code>pimd</code>.</p>

<p>Up until that point I had only read about this new fad, and played
around with it a bit <a href="http://www.westermo.com">at work</a> for use as a
stable build environment for cross-compiling.  I had no idea people
would want to use a Docker container as a multicast sink.  Basically I
was baffled.</p>

<p>The reporter used a Java based tool but simply couldn&rsquo;t get things to
work properly with <code>pimd</code> running on the host:</p>

<pre><code>                eth0
 MC sender ---&gt; [ Server host ]    &lt;--- router running pimd
                       |
               ________|________
              /     docker0     \   &lt;--- bridge    ______
             /         |         \                |      |   &lt;--- MC receiver
  __________/          |          \_______________|______|_____
 \                     |                            /         /
  \                     `------------------&gt;-------'         /
   \________________________________________________________/
      Container ship
</code></pre>

<p>We tried several approaches, but nothing seemed to help.  This became a
bit of blocker for the <code>pimd</code> v2.3.2 release and I admittedly lost a bit
of sleep over this.  So finally this weekend, I sat down and whipped my
old <a href="https://github.com/troglobit/mcjoin/">mcjoin</a> tool up into shape.
I&rsquo;ve relied on it for years, but it couldn&rsquo;t send or receive packets,
until now.</p>

<p>Running docker v1.5 in Ubuntu 15.10 I ran this, with <code>pimd</code> on the host
and <code>mcjoin</code> as a multicast sink for 250 groups in a container:</p>

<pre><code>cd ~/Troglobit/mcjoin
docker run -t -i -u `id -u`:`id -g` -v $HOME:$HOME -w $PWD troglobit/toolchain:latest ./mcjoin 225.1.2.3+250
^C
Received total: 2500 packets
</code></pre>

<p>The <code>pimd</code> and the multicast sender runs on my host, which should not
matter since Linux still has to route the traffic to the <code>docker0</code>
interface.  Also, without setting the TTL to 2 (or greater) the
container receives no traffic at all.  Here&rsquo;s what I run in another
terminal on my host:</p>

<pre><code>./mcjoin -s -t 2 -c 10 225.1.2.3+250
</code></pre>

<p>Although <code>pimd</code> is a little slow to register and install the forwarding
rules in the kernel, it sure enough worked on the first attempt! \o/</p>

<p>This is my first real application level experience with Docker, but it
is sure not the last.  Docker is a truly revolutionary new tool!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multicast Testing, Made Easy!]]></title>
    <link href="http://troglobit.github.io/blog/2016/03/07/multicast-testing/"/>
    <updated>2016-03-07T01:06:02+01:00</updated>
    <id>http://troglobit.github.io/blog/2016/03/07/multicast-testing</id>
    <content type="html"><![CDATA[<p>For the better part of the last ten years I&rsquo;ve been working with
multicast in one way or another.  I&rsquo;ve used many different tools for
testing, but usually simply using <code>ping(1)</code> and <code>tcpdump(1)</code> is quite
sufficient.  However, you often need to tell bridges (switches) to open
up multicast in your general direction for your pings to get through, so
you need to send an IGMP &ldquo;join&rdquo; first.  I found mcjoin, written by David
Stevens, in <a href="https://lkml.org/lkml/2004/8/5/143">this posting to LKML</a>
back in 2006, and started improving it and adding features to it over
the years.</p>

<p>Now, my interest and fascination with multicast only grew with time,
and despite elegant tools like <code>mgen(1)</code> and <code>omping(1)</code> I was never
quite happy.</p>

<p>When releasing SMCRoute v2.1.0 recently, and currently working on the
pimd v2.3.2 release, I was so tired of having to do so many manual steps
just to verify correct operation of a routing daemon.  Therefore I spent
the better part of the weekend fixing up my old mcjoin tool.</p>

<p>I wanted a reliable, simple, and UNIX-y tool to just test things for me.
So I cleaned up the old mcjoin project, first by migrating it from the
toolbox repo, then remove confusing command line options, improve and
simplify the syntax, and then added send/receive capabilities.  Been
meaning to get around to this for ages, and now it seems I had finally
had enough.  So here it is, v2.0:</p>

<ul>
<li><strong>Project</strong>: <a href="https://github.com/troglobit/mcjoin/">https://github.com/troglobit/mcjoin/</a></li>
<li><strong>ChangeLog</strong>: <a href="https://github.com/troglobit/mcjoin/releases/tag/v2.0">https://github.com/troglobit/mcjoin/releases/tag/v2.0</a></li>
</ul>


<p>Most of the time I simply want to see a resulting IGMP join message in
Wireshark, see it bite in a switch&rsquo;s FDB or a routing daemon&rsquo;s
forwarding table.  So, join is the default operation, and also continues
to be the name of the tool.  My favourite testing group is set as the
default, 225.1.2.3, so you only need to start the tool and you&rsquo;re off.
To send to the same default group (225.1.2.3), simply add <code>-s</code> to the
sender side.</p>

<pre><code>sender$ mcjoin -s
^C
sender$

receiver$ mcjoin
joined group 225.1.2.3 on eth0 ...
..................................................................^C
Received total: 66 packets
receiver$
</code></pre>

<p>If you ever need anything else, e.g. routing multicast, there&rsquo;s even a
man page.  It mentions setting the TTL and other such nastiness :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mrouted v3.9.7]]></title>
    <link href="http://troglobit.github.io/blog/2014/12/28/mrouted-v3-dot-9-7/"/>
    <updated>2014-12-28T19:38:06+01:00</updated>
    <id>http://troglobit.github.io/blog/2014/12/28/mrouted-v3-dot-9-7</id>
    <content type="html"><![CDATA[<p>Another release today is the venerable <a href="/mrouted.html">mrouted</a>, now
available as
<a href="https://github.com/troglobit/mrouted/releases/tag/3.9.7">v3.9.7 on GitHub</a>.</p>

<!-- more -->


<h2>Changes &amp; New Features</h2>

<ul>
<li>SNMP Support removed.  It never compiled and would have likely
needed a complete refactor to support modern AgentX.</li>
<li>Replaced static <code>config.mk</code> with configure script from pimd</li>
<li>RSRR Support now disabled by default, use <code>--enable-rsrr</code> to configure
script to re-enable</li>
<li>Possible to start with <code>mrouted</code> disabled on all interfaces by
default.  Use <code>enable</code> to .conf <code>phyint</code> directive and <code>-M/-N</code> command
line options to control behavior, default is same as before.  Thanks
to Joseph Gooch (<a href="https://github.com/goochjj">@goochjj</a>) for this feature!</li>
<li>Add David Waitzman and Craig Partridge to list of original authors
of <code>mrouted</code>, after being by Mr Waitzman :)</li>
<li>Change to use <code>stdint.h</code> types instead of unsafe homegrown types</li>
</ul>


<h2>Bug Fixes</h2>

<ul>
<li>Fix issue with older BSD kernels, mainly for current FreeBSD 10 and
older, that don&rsquo;t really give RAW sockets but byte swap <code>ip_len</code>
field, Olivier Cochard-Labb√© (<a href="https://github.com/ocochard">@ocochard</a>)</li>
<li>Build fixes for FreeBSD, should make maintaining ports easier :)</li>
<li>Change from <code>select()</code> to <code>poll()</code> due to descriptor limits, e.g.,
on BSD.</li>
<li>UNIX 2038 first audit, inspired by OpenBSD.  Cleanup type confusion
<code>int/u_long</code> where it should be <code>time_t</code>.  Also, clarify that <code>genid</code>
is OK, since it&rsquo;s used and stored as unsigned 32-bit integer.</li>
<li>Lots of minor fixes detected by Coverity Scan and Clang scan-build
<a href="https://scan.coverity.com/projects/3320">https://scan.coverity.com/projects/3320</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pimd v2.2.0 -- the Last Release of Pimd?]]></title>
    <link href="http://troglobit.github.io/blog/2014/12/28/last-release-of-pimd/"/>
    <updated>2014-12-28T13:42:18+01:00</updated>
    <id>http://troglobit.github.io/blog/2014/12/28/last-release-of-pimd</id>
    <content type="html"><![CDATA[<p>On one of the last days of 2014 I release <a href="/pimd.html">pimd</a>
<a href="https://github.com/troglobit/pimd/releases/tag/2.2.0">v2.2.0</a>, which
is an awesome release with a lot of new features and bug fixes!</p>

<p>However, it could very well be the last release I do.  Even though its
one of my most popular projects on
<a href="https://github.com/troglobit">GitHub</a> I have not had enough time to
dedicate to it over the years.  I will continue to do fixes and merge
pull requests until someone else steps up to take over.  There is also
the distinct possibility that the
<a href="https://github.com/greearb/xorp.ct">Xorp PIM-SM</a> or the new
<a href="https://github.com/udhos/qpimd">Quagga PIM-SSM</a> implementations will
(finally) make good old pimd completely redundant.</p>

<p>At <a href="http://www.westermo.com">work</a> we will likely start using the
Quagga PIM rather than pimd in WeOS.</p>

<p>For now though, enjoy pimd v2.2.0.  It&rsquo;s been tested in both my Qemu
based virtual testbed and a few setups using Linux&#8217; <code>netns</code> feature in
<a href="http://www.nrl.navy.mil/itd/ncs/products/core">CORE</a> &ndash; awesome
little proggy! :-)</p>

<!-- more -->


<h3>Changes &amp; New Features</h3>

<ul>
<li>Add IP fragmentation support for PIM register messages,
by Michael Fine of Cumulus Networks</li>
<li>Support <code>/LEN</code> syntax in <code>phyint</code> to complement <code>masklen LEN</code>, issue #12</li>
<li>Add support for /31 networks, point-to-point, thanks to Apollon Oikonomopoulos</li>
<li>Remove old broken SNMP support</li>
<li>OpenBSD inspired cleanup (deregister)
<a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.sbin/mrouted/">http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.sbin/mrouted/</a></li>
<li>General code cleanup, shorten local variable names, func decl. etc.</li>
<li>Support for router alert IP option in IGMP queries</li>
<li>Support for reading IGMPv3 membership reports</li>
<li>Update IGMP code to support FreeBSD >= 8.x</li>
<li>Retry read of routing tables on FreeBSD</li>
<li>Fix join/leve of ALL PIM Routers for FreeBSD and other UNIX kernels</li>
<li>Tested on FreeBSD, NetBSD and OpenBSD</li>
<li>Add very simple homegrown configure script</li>
<li>Update and document support for <code>rp_address</code>, <code>cand_rp</code>, and <code>cand_bootstrap_router</code></li>
<li>Add new <code>spt_threshold</code> to replace existing <code>switch_register_threshold</code>
and <code>switch_data_threshold</code> settings.  Cisco like and easier to understand</li>
</ul>


<h3>Bug Fixes</h3>

<ul>
<li>Fix to avoid infinite loop during unicast send failure, by Alex Tessmer</li>
<li>Fix bug in bootstrap when configured as candidate RP, issue #15</li>
<li>Fix segfault in <code>accept_igmp()</code>, issue #29</li>
<li>Fix default source preference, should be 101 (not 1024!)</li>
<li>Fix <code>ip_len</code> handling on older BSD&rsquo;s, thanks to Olivier Cochard-Labb√©, issue #23</li>
<li>Fix default prefix len in static RP example in <code>pimd.conf</code>, should be /4</li>
<li>Fix issue #31: Make IGMP query interval and querier timeout configurable</li>
<li>Fix issue #33: pimd does not work in background under FreeBSD</li>
<li>Fix issue #35: support for timing out other queriers from mrouted</li>
<li>Hopefully fix issue #22: Crash in (S,G) state when neighbor is lost</li>
<li>Misc. bug fixes thanks to Coverity Scan, static code analysis tool
<a href="https://scan.coverity.com/projects/3319">https://scan.coverity.com/projects/3319</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HowTo: Add Multicast Routing to FreeBSD Kernel]]></title>
    <link href="http://troglobit.github.io/blog/2014/09/23/howto-add-multicast-routing-support-to-the-freebsd-kernel/"/>
    <updated>2014-09-23T01:55:19+02:00</updated>
    <id>http://troglobit.github.io/blog/2014/09/23/howto-add-multicast-routing-support-to-the-freebsd-kernel</id>
    <content type="html"><![CDATA[<p>This is a very short blog post, mostly intended as a reminder to myself.
Basically, there are two methods of adding multicast routing support to
the FreeBSD kernel:</p>

<ol>
<li>Rebuild the kernel with <code>options MROUTING</code></li>
<li>Load the kernel module: <code>kldload ip_mroute</code></li>
</ol>


<p>The kernel rebuild assumes the <code>src.txz</code> set was installed previously.</p>

<pre><code>cd /usr/src
cd sys/amd64/conf
cat GENERIC | sed 's/GENERIC$/MULTICAST/' &gt; MULTICAST
echo 'options   MROUTING         # Multicast routing' &gt;&gt; MULTICAST
echo 'options   PIM              # Enable for pimd'   &gt;&gt; MULTICAST
cd -
make kernel KERNCONF=MULTICAST
reboot
</code></pre>

<p>That&rsquo;s it.  Remember to make sure your Qemu VM has enough RAM or it
will probably page fault on you.  I use 1,0 GB RAM.</p>

<p>The other option, to load the ready made module, is likely better.  But
you want it to load at boot.  So add this to <code>/boot/loader.conf</code>:</p>

<pre><code>ip_mroute_load="yes"
</code></pre>
]]></content>
  </entry>
  
</feed>
