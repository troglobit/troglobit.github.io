<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on The Last Outpost</title>
    <link>https://troglobit.com/categories/kernel/</link>
    <description>Recent content in kernel on The Last Outpost</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Sep 2014 01:55:19 +0000</lastBuildDate>
    
	<atom:link href="https://troglobit.com/categories/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HowTo: Add Multicast Routing to FreeBSD kernel</title>
      <link>https://troglobit.com/2014/09/23/howto-add-multicast-routing-support-to-the-freebsd-kernel/</link>
      <pubDate>Tue, 23 Sep 2014 01:55:19 +0000</pubDate>
      
      <guid>https://troglobit.com/2014/09/23/howto-add-multicast-routing-support-to-the-freebsd-kernel/</guid>
      <description>This is a very short blog post, mostly intended as a reminder to myself. Basically, there are two methods of adding multicast routing support to the FreeBSD kernel:
 Rebuild the kernel with options MROUTING Load the kernel module: kldload ip_mroute  The kernel rebuild assumes the src.txz set was installed previously.
cd /usr/src cd sys/amd64/conf cat GENERIC | sed &#39;s/GENERIC$/MULTICAST/&#39; &amp;gt; MULTICAST echo &#39;options MROUTING # Multicast routing&#39; &amp;gt;&amp;gt; MULTICAST echo &#39;options PIM # Enable for pimd&#39; &amp;gt;&amp;gt; MULTICAST cd - make kernel KERNCONF=MULTICAST reboot  That&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title>HowTo: Add Multicast Routing to FreeBSD kernel</title>
      <link>https://troglobit.com/howto/mrouting-in-freebsd/</link>
      <pubDate>Tue, 23 Sep 2014 01:55:19 +0200</pubDate>
      
      <guid>https://troglobit.com/howto/mrouting-in-freebsd/</guid>
      <description>This is a very short blog post, mostly intended as a reminder to myself. Basically, there are two methods of adding multicast routing support to the FreeBSD kernel:
 Rebuild the kernel with options MROUTING Load the kernel module: kldload ip_mroute  The kernel rebuild assumes the src.txz set was installed previously.
cd /usr/src cd sys/amd64/conf cat GENERIC | sed &#39;s/GENERIC$/MULTICAST/&#39; &amp;gt; MULTICAST echo &#39;options MROUTING # Multicast routing&#39; &amp;gt;&amp;gt; MULTICAST echo &#39;options PIM # Enable for pimd&#39; &amp;gt;&amp;gt; MULTICAST cd - make kernel KERNCONF=MULTICAST reboot  That&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title>VMWare Kernel Modules for Your New Kernel</title>
      <link>https://troglobit.com/2007/03/25/vmware-kernel-modules-for-your-new-kernel/</link>
      <pubDate>Sun, 25 Mar 2007 23:59:57 +0000</pubDate>
      
      <guid>https://troglobit.com/2007/03/25/vmware-kernel-modules-for-your-new-kernel/</guid>
      <description>My recent post on building Debian kernels misses a subtle but useful point. Namely that of building Debian kernel modules alongside your new kernel. I wanted to run a new kernel with the Ubuntu vmware-player-kernel-source package. I was fumbling around wanting to use module-assistant to do this for me when I stumbled upon on the solution, presented so eloquently by my friend Albert Veli. This gives us a small update to the previous post:</description>
    </item>
    
    <item>
      <title>HowTo: Building Debian/Ubuntu Kernels</title>
      <link>https://troglobit.com/2007/02/03/building-debian-slash-ubuntu-kernels/</link>
      <pubDate>Sat, 03 Feb 2007 11:00:45 +0000</pubDate>
      
      <guid>https://troglobit.com/2007/02/03/building-debian-slash-ubuntu-kernels/</guid>
      <description>I have been over this topic so many times now, strangely enough I&amp;rsquo;ve managed to make things more complicated than they need to be. It&amp;rsquo;s really this simple:
$ wget ftp://ftp.sunet.se/pub/Linux/kernels/v2.6/linux-2.6.19.2.tar.bz2 $ tar xfj linux-2.6.19.2.tar.bz2 $ cd linux-2.6.19.2/ $ zcat /proc/config.gz &amp;gt;.config $ make menuconfig [Tweak to your hearts desire] $ fakeroot make-kpkg --initrd kernel_image $ dpkg -i ../linux-image-2.6.19.2_2.6.19.2-10.00.Custom_i386.deb [DONE!] You may, of course, need to tweak the file /etc/kernel-pkg.conf, but there are man pages for that.</description>
    </item>
    
    <item>
      <title>make-kpkg and dirty modules</title>
      <link>https://troglobit.com/2006/07/17/make-kpkg-and-dirty-modules/</link>
      <pubDate>Mon, 17 Jul 2006 22:10:24 +0000</pubDate>
      
      <guid>https://troglobit.com/2006/07/17/make-kpkg-and-dirty-modules/</guid>
      <description>Dammit, tonight I spent too many hours chasing down a &amp;ldquo;feature&amp;rdquo; in the Debian kernel build process or the Linux-2.6 kernel. I haven&amp;rsquo;t yet deciced who to blame ;-)
Here goes: when you build the latest Linux 2.6 kernel, checked out from the git repository, with make-kpkg you should make sure to uncheck the CONFIG_LOCALVERSION_AUTO option in the kernel config before hand. It&amp;rsquo;s under &amp;ldquo;General setup&amp;rdquo; â†’ &amp;ldquo;Automatically append version information &amp;hellip;&amp;quot;.</description>
    </item>
    
  </channel>
</rss>