<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on </title>
    <link>/categories/Git/</link>
    <description>Recent content in Git on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>troglobit@gmail.com (Joachim Nilsson)</managingEditor>
    <webMaster>troglobit@gmail.com (Joachim Nilsson)</webMaster>
    <lastBuildDate>Thu, 02 Jul 2015 17:11:55 +0000</lastBuildDate>
    
	<atom:link href="/categories/Git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HowTo: Using -lite with a GIT-based application</title>
      <link>/2015/07/02/howto-using-lite-with-a-git-based-application/</link>
      <pubDate>Thu, 02 Jul 2015 17:11:55 +0000</pubDate>
      <author>troglobit@gmail.com (Joachim Nilsson)</author>
      <guid>/2015/07/02/howto-using-lite-with-a-git-based-application/</guid>
      <description>&lt;p&gt;Years ago while looking for a fast &lt;a href=&#34;https://en.wikipedia.org/wiki/Init&#34;&gt;init&lt;/a&gt; replacement for &lt;a href=&#34;http://westermo.com/&#34;&gt;work&lt;/a&gt;,
I found &lt;a href=&#34;http://helllabs.org/finit/&#34;&gt;Finit&lt;/a&gt;.  Originally written by &lt;a href=&#34;https://github.com/cmatsuoka&#34;&gt;Claudio Matsuoka&lt;/a&gt; to act
as a drop-in replacement for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Asus_Eee_PC&#34;&gt;Asus EeePC&lt;/a&gt; &lt;a href=&#34;http://wiki.eeeuser.com/boot_process:the_boot_process&#34;&gt;fastinit&lt;/a&gt;, &lt;em&gt;&amp;ldquo;gaps
filled with frog DNA &amp;hellip;&amp;ldquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Until I found Finit I had always been in awe of those venturing into the
realm of &lt;a href=&#34;http://0pointer.net/blog/&#34;&gt;PID 1&lt;/a&gt;.  However, learning from the simplicity of Claudio&amp;rsquo;s
code I realized that although PID 1 at times is indistinguishable from
magic, it is really not that hard to master.  &lt;a href=&#34;https://github.com/troglobit/finit&#34;&gt;My version of Finit&lt;/a&gt;
is available on GitHub.&lt;/p&gt;

&lt;p&gt;The code is open sourced under the very liberal &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT/X11 license&lt;/a&gt;,
and much of its frog DNA has proven very useful to me over the years.
This blog post is about how that frog DNA can help you fill gaps in your
projects &amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HowTo: Push to multiple GIT repos with one command</title>
      <link>/2015/07/01/howto-push-to-multiple-git-repos-with-one-command/</link>
      <pubDate>Wed, 01 Jul 2015 00:42:17 +0000</pubDate>
      <author>troglobit@gmail.com (Joachim Nilsson)</author>
      <guid>/2015/07/01/howto-push-to-multiple-git-repos-with-one-command/</guid>
      <description>&lt;p&gt;So, now that I have &lt;a href=&#34;http://git.troglobit.com&#34;&gt;http://git.troglobit.com&lt;/a&gt; setup as a backup GIT repo
to &lt;a href=&#34;https://github.com/troglobit&#34;&gt;https://github.com/troglobit&lt;/a&gt;, I needed a &lt;em&gt;simple&lt;/em&gt; way to always push
to both repos &amp;ndash; best way for me is to always hook into my regular work
flow, otherwise I&amp;rsquo;d just forget.  The &lt;a href=&#34;1&#34;&gt;git-remote(1)&lt;/a&gt; man page to the
rescue, it describes the &lt;code&gt;set-url --add&lt;/code&gt; sub-command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote set-url --add origin ssh://git.troglobit.com:1234/srv/git/watchdogd.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, with a simple &lt;code&gt;git push&lt;/code&gt; followed by &lt;code&gt;git push --tags&lt;/code&gt; I had now
pushed to both the GitHub repo as well as my own server!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Converting from Bazaar to GIT</title>
      <link>/2010/07/13/converting-from-bazaar-to-git/</link>
      <pubDate>Tue, 13 Jul 2010 01:56:11 +0000</pubDate>
      <author>troglobit@gmail.com (Joachim Nilsson)</author>
      <guid>/2010/07/13/converting-from-bazaar-to-git/</guid>
      <description>You need git, and bazaar obviously. Also install bzr-fastimport, it contains the export plugin as well. The rest is a rip off from Frank&amp;rsquo;s page.
$ git init project.git $ cd project.git $ bzr fast-export --export-marks=.git/bzr.mark ~/project.bzr | git fast-import --export-marks=.git/git.mark That worked for me. The output will likely be something like this:
01:41:19 Calculating the revisions to include ... 01:41:19 Starting export of 33 revisions ... 01:41:20 Exported 33 revisions in 0:00:01 git-fast-import statistics: --------------------------------------------------------------------- Alloc&#39;d objects: 5000 Total objects : 267 ( 0 duplicates ) blobs : 158 ( 0 duplicates 57 deltas) trees : 76 ( 0 duplicates 55 deltas) commits: 33 ( 0 duplicates 0 deltas) tags : 0 ( 0 duplicates 0 deltas) Total branches : 10 ( 1 loads ) marks : 1024 ( 33 unique ) atoms : 38 Memory total : 2344 KiB pools : 2110 KiB objects: 234 KiB --------------------------------------------------------------------- pack_report: getpagesize() = 4096 pack_report: core.</description>
    </item>
    
  </channel>
</rss>