<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on Joachim Wiberg</title>
    <link>https://troglobit.com/categories/unix/</link>
    <description>Recent content in unix on Joachim Wiberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>UNIX&amp;trade; 4Life! &amp;#9994;</copyright>
    <lastBuildDate>Tue, 09 Jun 2020 22:48:52 +0200</lastBuildDate>
    <atom:link href="https://troglobit.com/categories/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open Source Releases</title>
      <link>https://troglobit.com/post/2020-06-09-open-source-releases/</link>
      <pubDate>Tue, 09 Jun 2020 22:48:52 +0200</pubDate>
      <guid>https://troglobit.com/post/2020-06-09-open-source-releases/</guid>
      <description>&lt;p&gt;The last couple of months have been crazy.  The downturn in the economy&#xA;due to Covid-19, mass layoffs, social distancing and quarantine.  Not&#xA;to mention the unrest in US and Europe in the wake of George Floyd&amp;rsquo;s&#xA;uneccessary death.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Useful UNIX API:s</title>
      <link>https://troglobit.com/post/2020-02-22-useful-unix-apis/</link>
      <pubDate>Sat, 22 Feb 2020 09:45:00 +0000</pubDate>
      <guid>https://troglobit.com/post/2020-02-22-useful-unix-apis/</guid>
      <description>&lt;p&gt;Had an interesting conversation with a buddy last night.  It started out&#xA;as a shift-reduce problem with Bison and ended up a ping-pong of useful&#xA;UNIX API:s.  We concluded that despite having worked professionally with&#xA;UNIX for over two decades, it is still very satisfying finding gems like&#xA;these.&lt;/p&gt;&#xA;&lt;p&gt;Most people are completely unaware they exist and end up rolling their&#xA;own (buggy) implementations.  For instance, string manipulation and&#xA;various forms of linked lists.  Which is why I many years ago extracted&#xA;the &lt;em&gt;frog DNA&lt;/em&gt; from &lt;a href=&#34;https://github.com/troglobit/finit/&#34;&gt;Finit&lt;/a&gt; to a&#xA;separate library called &lt;a href=&#34;https://github.com/troglobit/libite/&#34;&gt;libite&lt;/a&gt;,&#xA;or -lite for short.  It imports the OpenBSD &lt;code&gt;strlcpy()&lt;/code&gt; family of API:s,&#xA;up-to-date &lt;code&gt;queue.h&lt;/code&gt; with the &lt;code&gt;_SAFE&lt;/code&gt; iterators, and more.  Some people&#xA;like &lt;a href=&#34;https://libbsd.freedesktop.org/wiki/&#34;&gt;libbsd&lt;/a&gt; for this, but I&amp;rsquo;ve&#xA;found many of the ports incomplete and unsafe and prefer to stay closer&#xA;to the upstream *BSD versions.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This post was originally written Nov 14, 2015.  It was a&#xA;Saturday and I remember being extremely inspired when I wrote it.  I&amp;rsquo;ve&#xA;continued adding to it over the years, and still do.  So, as of Jul 2,&#xA;2017 I&amp;rsquo;m bumping the modification date each time I add something new :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multicast routing with PIM-SM over GRE</title>
      <link>https://troglobit.com/2016/07/05/multicast-routing-with-pim-sm-over-gre/</link>
      <pubDate>Tue, 23 Jan 2018 20:39:36 +0000</pubDate>
      <guid>https://troglobit.com/2016/07/05/multicast-routing-with-pim-sm-over-gre/</guid>
      <description>&lt;p&gt;GRE tunnels are useful in many ways.  This blog post shows how to set up&#xA;multicast routing with &lt;a href=&#34;https://github.com/troglobit/pimd/&#34;&gt;pimd&lt;/a&gt; over a&#xA;GRE tunnel.  To achieve this we will also set up OSPF over GRE with&#xA;&lt;a href=&#34;http://www.quagga.net&#34;&gt;Quagga&lt;/a&gt;, because PIM, unlike DVMRP (&lt;code&gt;mrouted&lt;/code&gt;),&#xA;require unicast routing rules to be established.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       .----{ Intranet }----.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      /    192.168.1.0/24    \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     /                        \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.10 /                          \.20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.--&amp;#39;---. .1  GRE Tunnel  .2 .---`--.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|      |====================|      |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  R1  |   172.16.16.0/30   |  R2  |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|      |                    |      |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;--.---&amp;#39;                    &amp;#39;------&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   | .1                        | .1 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   |    10.0.1.0/24            |    10.0.2.0/24&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   | .2                        | .2 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.--&amp;#39;---.                    .--&amp;#39;---.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|      |                    |      |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  C1  |                    |  C2  |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|      |                    |      |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;------&amp;#39;                    &amp;#39;------&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this post we are using the home WiFi network, 192.168.1.0/24, to hook&#xA;up the GRE tunnel.  It is just as easy to extend this to a big corporate&#xA;Intranet with more routers between &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt;.  As long as that IT&#xA;department takes care of the unicast routing between &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; so&#xA;that the GRE tunnel can be established.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redirecting Ports For Fun and Profit</title>
      <link>https://troglobit.com/2016/07/02/redirecting-tcp-udp-ports-for-fun-and-profit/</link>
      <pubDate>Sat, 02 Jul 2016 12:54:37 +0000</pubDate>
      <guid>https://troglobit.com/2016/07/02/redirecting-tcp-udp-ports-for-fun-and-profit/</guid>
      <description>&lt;p&gt;Recently I needed a simple TCP/UDP port redirector and stumbled upon&#xA;&lt;a href=&#34;https://serverfault.com/questions/252150/port-forwarding-on-linux-without-iptables/&#34;&gt;this Stackoverflow post&lt;/a&gt;.  As usual I wasn&amp;rsquo;t first wanting to this&#xA;without using &lt;code&gt;iptables&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There were several alternatives, but since my target was embedded with&#xA;limited amount of RAM and flash I wanted something really small.  So the&#xA;best fit turned out to be &lt;a href=&#34;https://github.com/troglobit/redir&#34;&gt;redir&lt;/a&gt;, which unfortunately only could&#xA;handle TCP connections.  This is what led me to write &lt;a href=&#34;https://github.com/troglobit/uredir&#34;&gt;uredir&lt;/a&gt; to&#xA;complement &lt;code&gt;redir&lt;/code&gt;.  Eventually I ended up adoptiing &lt;code&gt;redir&lt;/code&gt; as well,&#xA;which meant giving it a bit of a facelift and to give them both the same&#xA;look and feel.&lt;/p&gt;&#xA;&lt;p&gt;Currently they are two separate applications, which in some use-cases&#xA;can be beneficial (small size), but I may in the future transplant the&#xA;UDP functionality of &lt;code&gt;uredir&lt;/code&gt; into &lt;code&gt;redir&lt;/code&gt;.  We&amp;rsquo;ll see, right now though&#xA;I have several other &lt;a href=&#34;https://troglobit.com/projects/&#34;&gt;projects&lt;/a&gt; to attend to :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using netcat to test your Internet daemon</title>
      <link>https://troglobit.com/2016/04/21/using-netcat-to-test-your-internet-daemon/</link>
      <pubDate>Thu, 21 Apr 2016 14:21:49 +0000</pubDate>
      <guid>https://troglobit.com/2016/04/21/using-netcat-to-test-your-internet-daemon/</guid>
      <description>So you&amp;rsquo;re having a problem with the Internet daemon you wrote. You&amp;rsquo;re convinced the firewall, or some other magic, in your modern Linux distribution is eating your packets.&#xA;No.&#xA;First, make sure your daemon is actually running and has successfully bound to the address and port in question:&#xA;sudo netstat -atnup If your application is not listed there you have a problem with it binding its server socket. Check the return values from bind().</description>
    </item>
    <item>
      <title>The key to successful boot</title>
      <link>https://troglobit.com/2016/04/11/the-key-to-successful-boot/</link>
      <pubDate>Mon, 11 Apr 2016 01:28:27 +0000</pubDate>
      <guid>https://troglobit.com/2016/04/11/the-key-to-successful-boot/</guid>
      <description>&lt;p&gt;How do you know when your UNIX service (daemon) is ready?  Simple, it&#xA;has created a PID file, signalling to you how to reach it.  Usually this&#xA;file is created as &lt;code&gt;/var/run/daemon.pid&lt;/code&gt;, or &lt;code&gt;/run/daemon.pid&lt;/code&gt;, and has&#xA;the PID of &lt;code&gt;daemon&lt;/code&gt; as the first and only data in the file.  This data&#xA;may or may not have a UNIX line ending.&lt;/p&gt;&#xA;&lt;p&gt;Only trouble is: most UNIX daemons do not re-assert that PID file&#xA;properly on &lt;code&gt;SIGHUP&lt;/code&gt; (if they support &lt;code&gt;SIGHUP&lt;/code&gt; that is).  When I send&#xA;&lt;code&gt;SIGHUP&lt;/code&gt; to a daemon I expect it to re-read its &lt;code&gt;/etc/daemon.conf&lt;/code&gt; and&#xA;resume operation, basically a quicker way than stop/start.&lt;/p&gt;&#xA;&lt;p&gt;Annoyingly however, most daemons do not signal us back to tell us when&#xA;they&amp;rsquo;re done with the &lt;code&gt;SIGHUP&lt;/code&gt;.  Naturally a new movement has risen that&#xA;says we should all instrument our daemons with D-bus &amp;hellip; I say no.&#xA;Simply touch the PID file instead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lecture from the UNIX beards</title>
      <link>https://troglobit.com/2016/04/04/lecture-from-the-unix-beards/</link>
      <pubDate>Mon, 04 Apr 2016 00:14:28 +0000</pubDate>
      <guid>https://troglobit.com/2016/04/04/lecture-from-the-unix-beards/</guid>
      <description>After the rm -rf /* disaster that hit me a couple of weeks ago I&amp;rsquo;ve been rebuilding my setup, restoring the few files I&amp;rsquo;ve had backed up, and collecting advice from the elders.&#xA;Turns out there are a few tricks that can save your home directory from accidents like mine. The first one is rather obvious, but I&amp;rsquo;m writing it down anyway:&#xA;Keep separate accounts. If possible, use separate accounts (with different permissions obviously) for different projects.</description>
    </item>
    <item>
      <title>Testing multicast with Docker</title>
      <link>https://troglobit.com/2016/03/07/testing-multicast-with-docker/</link>
      <pubDate>Mon, 07 Mar 2016 01:37:04 +0000</pubDate>
      <guid>https://troglobit.com/2016/03/07/testing-multicast-with-docker/</guid>
      <description>&lt;p&gt;Recently &lt;a href=&#34;https://github.com/troglobit/pimd/issues/70&#34;&gt;issue #70&lt;/a&gt; was&#xA;reported to &lt;a href=&#34;https://github.com/troglobit/pimd/&#34;&gt;pimd&lt;/a&gt;.  That number of&#xA;issues reported is cool in itself, but this was a question about&#xA;&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; and &lt;code&gt;pimd&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Up until that point I had only read about this new fad, and played&#xA;around with it a bit &lt;a href=&#34;http://www.westermo.com&#34;&gt;at work&lt;/a&gt; for use as a&#xA;stable build environment for cross-compiling.  I had no idea people&#xA;would want to use a Docker container as a multicast sink.  Basically I&#xA;was baffled.&lt;/p&gt;&#xA;&lt;p&gt;The reporter used a Java based tool but simply couldn&amp;rsquo;t get things to&#xA;work properly with &lt;code&gt;pimd&lt;/code&gt; running on the host:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;                eth0&#xA; MC sender ---&amp;gt; [ Server host ]    &amp;lt;--- router running pimd&#xA;                       |&#xA;               ________|________&#xA;              /     docker0     \   &amp;lt;--- bridge    ______&#xA;             /         |         \                |      |   &amp;lt;--- MC receiver&#xA;  __________/          |          \_______________|______|_____&#xA; \                     |                            /         /&#xA;  \                     `------------------&amp;gt;-------&#39;         /&#xA;   \________________________________________________________/&#xA;      Container ship&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Multicast testing, made easy!</title>
      <link>https://troglobit.com/2016/03/07/multicast-testing/</link>
      <pubDate>Mon, 07 Mar 2016 01:06:02 +0000</pubDate>
      <guid>https://troglobit.com/2016/03/07/multicast-testing/</guid>
      <description>&lt;p&gt;For the better part of the last ten years I have been working with&#xA;multicast in one way or another.  I&amp;rsquo;ve used many different tools for&#xA;testing, but on most systems I usually resort to &lt;code&gt;ping(1)&lt;/code&gt; and&#xA;&lt;code&gt;tcpdump(1)&lt;/code&gt;, which are quite sufficient.  However, you often need to&#xA;tell bridges (switches) to open up multicast in your general direction&#xA;for your pings to get through, so you need to send an IGMP &amp;ldquo;join&amp;rdquo; first.&lt;/p&gt;&#xA;&lt;p&gt;Way back in 2006 I stumbled upon a neat tool called &lt;code&gt;mcjoin&lt;/code&gt;, written by&#xA;David Stevens and announced in&#xA;&lt;a href=&#34;https://lkml.org/lkml/2004/8/5/143&#34;&gt;this posting to LKML&lt;/a&gt;.  I started&#xA;improving and adding features to it over the years.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awesome: Changing Next/Prev Tune in Spotify</title>
      <link>https://troglobit.com/2015/11/10/awesome-changing-next-slash-prev-tune-in-spotify/</link>
      <pubDate>Tue, 10 Nov 2015 12:14:09 +0000</pubDate>
      <guid>https://troglobit.com/2015/11/10/awesome-changing-next-slash-prev-tune-in-spotify/</guid>
      <description>Back to using the Awesome WM in Ubuntu. This time I&amp;rsquo;m setting up everything from scratch and first up is fixing keybindings to control my main music player: Spotify!&#xA;Edit your ~/.config/awesome/rc.lua with Emacs (obviously). If you do not have an rc file, simply copy the system /etc/xdb/awesome/rc.lua:&#xA;globalkeys = awful.util.table.join(globalkeys, awful.key({}, &amp;quot;XF86AudioRaiseVolume&amp;quot;, function () awful.util.spawn(&amp;quot;amixer -D pulse sset Master 5%+&amp;quot;, false) end), awful.key({}, &amp;quot;XF86AudioLowerVolume&amp;quot;, function () awful.util.spawn(&amp;quot;amixer -D pulse sset Master 5%-&amp;quot;, false) end), awful.</description>
    </item>
  </channel>
</rss>
