<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Troglobit</title>
    <link>/categories/programming/</link>
    <description>Recent content in Programming on Troglobit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>troglobit@gmail.com (Joachim Nilsson)</managingEditor>
    <webMaster>troglobit@gmail.com (Joachim Nilsson)</webMaster>
    <lastBuildDate>Mon, 12 Jan 2015 01:57:40 +0000</lastBuildDate>
    
	<atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rant: All the C Compiler Warnings ...</title>
      <link>/2015/01/12/rant-all-the-c-compiler-warnings-dot-dot-dot/</link>
      <pubDate>Mon, 12 Jan 2015 01:57:40 +0000</pubDate>
      <author>troglobit@gmail.com (Joachim Nilsson)</author>
      <guid>/2015/01/12/rant-all-the-c-compiler-warnings-dot-dot-dot/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Enable &lt;em&gt;all&lt;/em&gt; the warnings!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is one of the truths you learn when you start working with C.  Most
of the time adding &lt;code&gt;CPPFLAGS=&amp;quot;-W -Wall -Werror&amp;quot;&lt;/code&gt; is all you need to find
all the nasty bugs.  And if that&amp;rsquo;s not enough, there are tons of tools
for static code analysis, like &lt;code&gt;scan-build&lt;/code&gt; in
&lt;a href=&#34;http://clang-analyzer.llvm.org/scan-build.html&#34;&gt;Clang&lt;/a&gt;, and
&lt;a href=&#34;https://scan.coverity.com/&#34;&gt;Coverity Scan&lt;/a&gt;, to help you &lt;em&gt;find all the
bugs&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;However, these pesky warnings (some of which cannot even be disabled!)
are sometimes more of a nuisance than help.  Sometimes you &lt;em&gt;know&lt;/em&gt; that
some parameters to a function will remain unused &amp;ndash; it&amp;rsquo;s a callback, and
you don&amp;rsquo;t need all the data given to you.  So you start adding all kinds
of voodoo, like &lt;code&gt;__attribute__ ((unused))&lt;/code&gt; &amp;hellip; seriously?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programming as an Artform</title>
      <link>/2013/06/22/programming-as-an-artform/</link>
      <pubDate>Sat, 22 Jun 2013 00:00:00 +0000</pubDate>
      <author>troglobit@gmail.com (Joachim Nilsson)</author>
      <guid>/2013/06/22/programming-as-an-artform/</guid>
      <description>&lt;p&gt;This is a response to the excellent post by Jani Gor≈°e, titled
&lt;a href=&#34;https://blooki.st/BlookElement/ShowTextPhoto?blookElementId=1962&#34;&gt;Why is Programming an Art?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever since I began studying Computer Engineering at
&lt;a href=&#34;http://www.mdh.se&#34;&gt;university&lt;/a&gt; back in 1995 I have struggled to find
the &amp;ldquo;proper&amp;rdquo; ways to format my code, name functions and variables
appropriately, structure functions into files and files into
directories with Makefiles and Makefile snippets, using both recursive
and non-recursive make.  Formatting of code, for instance, was for a
while a bit of an obsession of mine, and it sort of is still.  But
today I am more concerned with the overall structure and how
components interact.  Even though I can still get very annoyed at
people naming their local variables obtrusively.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>